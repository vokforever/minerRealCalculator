#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–∞–Ω–¥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏
"""

import os
import sys
import json
import logging
from datetime import datetime, timedelta
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_electricity_today():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è...")
    
    try:
        from main import get_today_spending
        
        today_stats = get_today_spending()
        
        if today_stats:
            logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            logger.info(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–∫–∞—Ü–∏–π: {len(today_stats)}")
            
            for location, stats in today_stats.items():
                logger.info(f"   üìç {location}:")
                logger.info(f"      –≠–Ω–µ—Ä–≥–∏—è: {stats.get('total_energy', 0):.3f} –∫–í—Ç¬∑—á")
                logger.info(f"      –°—Ç–æ–∏–º–æ—Å—Ç—å: {stats.get('total_cost', 0):.2f} RUB")
                logger.info(f"      –ò—Å—Ç–æ—á–Ω–∏–∫: {stats.get('source', 'Unknown')}")
                
                if stats.get('devices'):
                    logger.info(f"      –£—Å—Ç—Ä–æ–π—Å—Ç–≤: {len(stats['devices'])}")
            
            return True
        else:
            logger.warning("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return True  # –ù–µ —Å—á–∏—Ç–∞–µ–º –æ—à–∏–±–∫–æ–π –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥–∞–Ω–Ω—ã—Ö
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {e}")
        return False

def test_electricity_72h():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–∏ –∑–∞ 72 —á–∞—Å–∞"""
    logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞ 72 —á–∞—Å–∞...")
    
    try:
        from main import get_72h_consumption_from_api
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–ª—è –∫–∞–∂–¥–æ–π –ª–æ–∫–∞—Ü–∏–∏
        from main import DEVICES
        locations = set(device["location"] for device in DEVICES)
        
        if not locations:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π")
            return True
        
        for location in locations:
            logger.info(f"   –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏: {location}")
            api_data = get_72h_consumption_from_api(location)
            
            if api_data['total_energy'] > 0:
                logger.info(f"      ‚úÖ API –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã: {api_data['total_energy']:.3f} –∫–í—Ç¬∑—á")
                logger.info(f"      –°—Ç–æ–∏–º–æ—Å—Ç—å: {api_data['total_cost']:.2f} RUB")
                logger.info(f"      –î–µ–Ω—å: {api_data['day_energy']:.3f} –∫–í—Ç¬∑—á")
                logger.info(f"      –ù–æ—á—å: {api_data['night_energy']:.3f} –∫–í—Ç¬∑—á")
            else:
                logger.info(f"      ‚ö†Ô∏è API –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã –¥–ª—è {location}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞ 72 —á–∞—Å–∞: {e}")
        return False

def test_energy_data_function():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã"""
    logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã...")
    
    try:
        from main import get_energy_data
        
        end_date = datetime.now()
        start_date = end_date - timedelta(hours=72)
        
        energy_data = get_energy_data(start_date, end_date)
        
        if energy_data:
            logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –ø–æ–ª—É—á–µ–Ω—ã: {len(energy_data)} –∑–∞–ø–∏—Å–µ–π")
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ª–æ–∫–∞—Ü–∏—è–º
            location_stats = {}
            for session in energy_data:
                location = session.get("miner_location", "Unknown")
                if location not in location_stats:
                    location_stats[location] = {"count": 0, "total_energy": 0}
                
                location_stats[location]["count"] += 1
                location_stats[location]["total_energy"] += session.get("energy_kwh", 0)
            
            for location, stats in location_stats.items():
                logger.info(f"   üìç {location}: {stats['count']} –∑–∞–ø–∏—Å–µ–π, {stats['total_energy']:.3f} –∫–í—Ç¬∑—á")
        else:
            logger.info("‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –Ω–æ–≤—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–æ–∫)")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def test_device_configuration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
    logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤...")
    
    try:
        from main import DEVICES
        
        if DEVICES:
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(DEVICES)} —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
            
            for device in DEVICES:
                logger.info(f"   üñ•Ô∏è {device['name']} ({device['device_id']})")
                logger.info(f"      –õ–æ–∫–∞—Ü–∏—è: {device['location']}")
                logger.info(f"      –ê–∫—Ç–∏–≤–Ω–æ: {device.get('is_active', True)}")
        else:
            logger.warning("‚ö†Ô∏è –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏")
    
    tests = [
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤", test_device_configuration),
        ("–§—É–Ω–∫—Ü–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è", test_electricity_today),
        ("–§—É–Ω–∫—Ü–∏—è –∑–∞ 72 —á–∞—Å–∞", test_electricity_72h),
        ("–§—É–Ω–∫—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", test_energy_data_function)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        logger.info(f"\n{'='*50}")
        logger.info(f"–¢–µ—Å—Ç: {test_name}")
        logger.info(f"{'='*50}")
        
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            results.append((test_name, False))
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    logger.info(f"\n{'='*50}")
    logger.info("–ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    logger.info(f"{'='*50}")
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        logger.info(f"{test_name}: {status}")
        if result:
            passed += 1
    
    logger.info(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        logger.warning(f"‚ö†Ô∏è {total - passed} —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
