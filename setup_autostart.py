#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ VPS.
–°–æ–∑–¥–∞–µ—Ç systemd —Å–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
"""

import os
import sys
import subprocess
from pathlib import Path

def check_root():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–∫—Ä–∏–ø—Ç –æ—Ç root"""
    if os.geteuid() != 0:
        print("‚ùå –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω –æ—Ç –∏–º–µ–Ω–∏ root")
        print("   –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: sudo python setup_autostart.py")
        return False
    return True

def get_current_directory():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é"""
    return os.getcwd()

def create_systemd_service(working_dir):
    """–°–æ–∑–¥–∞–µ—Ç systemd —Å–µ—Ä–≤–∏—Å"""
    service_name = "electricity-monitor"
    service_content = f"""[Unit]
Description=Electricity Monitor Daemon
After=network.target
Wants=network.target

[Service]
Type=simple
User=root
WorkingDirectory={working_dir}
ExecStart={sys.executable} {working_dir}/run_monitor_daemon.py
Restart=always
RestartSec=30
StandardOutput=journal
StandardError=journal
SyslogIdentifier=electricity-monitor

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
MemoryMax=512M
CPUQuota=50%

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
Environment=PYTHONUNBUFFERED=1

[Install]
WantedBy=multi-user.target
"""
    
    service_file = f"/etc/systemd/system/{service_name}.service"
    
    try:
        with open(service_file, 'w') as f:
            f.write(service_content)
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω systemd —Å–µ—Ä–≤–∏—Å: {service_file}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞: {e}")
        return False

def create_logrotate_config():
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é logrotate –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏ –ª–æ–≥–æ–≤"""
    config_content = """# –†–æ—Ç–∞—Ü–∏—è –ª–æ–≥–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞
/root/minerRealCalculator/*.log {
    daily
    missingok
    rotate 7
    compress
    delaycompress
    notifempty
    create 644 root root
    postrotate
        systemctl reload electricity-monitor >/dev/null 2>&1 || true
    endscript
}

/root/minerRealCalculator/nohup.out {
    daily
    missingok
    rotate 3
    compress
    delaycompress
    notifempty
    create 644 root root
}

/root/minerRealCalculator/nohup.err {
    daily
    missingok
    rotate 3
    compress
    delaycompress
    notifempty
    create 644 root root
}
"""
    
    config_file = "/etc/logrotate.d/electricity-monitor"
    
    try:
        with open(config_file, 'w') as f:
            f.write(config_content)
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è logrotate: {config_file}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è logrotate: {e}")
        return False

def create_cron_jobs():
    """–°–æ–∑–¥–∞–µ—Ç cron –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è"""
    cron_content = """# –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞
# –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 7 –¥–Ω–µ–π –≤ 2:00
0 2 * * 0 cd /root/minerRealCalculator && python manage_daemon.py cleanup >/dev/null 2>&1

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
0 */6 * * * cd /root/minerRealCalculator && python manage_daemon.py status >/dev/null 2>&1

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞ –≤ 3:00 (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
# 0 3 * * * systemctl restart electricity-monitor >/dev/null 2>&1
"""
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    temp_cron = "/tmp/electricity-monitor-cron"
    
    try:
        with open(temp_cron, 'w') as f:
            f.write(cron_content)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ crontab
        result = subprocess.run(
            ["crontab", "-l"],
            capture_output=True,
            text=True
        )
        
        current_cron = result.stdout if result.returncode == 0 else ""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –Ω–∞—à–∏ –∑–∞–¥–∞—á–∏
        if "electricity-monitor" not in current_cron:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
            with open(temp_cron, 'r') as f:
                new_cron = f.read()
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏ –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
            combined_cron = current_cron + "\n" + new_cron
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
            temp_combined = "/tmp/combined-cron"
            with open(temp_combined, 'w') as f:
                f.write(combined_cron)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º crontab
            subprocess.run(["crontab", temp_combined], check=True)
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            os.remove(temp_cron)
            os.remove(temp_combined)
            
            print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã cron –∑–∞–¥–∞—á–∏")
        else:
            print("‚ÑπÔ∏è  Cron –∑–∞–¥–∞—á–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
            os.remove(temp_cron)
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è cron –∑–∞–¥–∞—á: {e}")
        if os.path.exists(temp_cron):
            os.remove(temp_cron)
        return False

def enable_and_start_service():
    """–í–∫–ª—é—á–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç systemd —Å–µ—Ä–≤–∏—Å"""
    try:
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º systemd
        subprocess.run(["systemctl", "daemon-reload"], check=True)
        print("‚úÖ Systemd –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω")
        
        # –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫
        subprocess.run(["systemctl", "enable", "electricity-monitor"], check=True)
        print("‚úÖ –°–µ—Ä–≤–∏—Å –≤–∫–ª—é—á–µ–Ω –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å
        subprocess.run(["systemctl", "start", "electricity-monitor"], check=True)
        print("‚úÖ –°–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω")
        
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ systemd: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def show_status():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        print("\nüìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞:")
        subprocess.run(["systemctl", "status", "electricity-monitor"], check=False)
        
        print("\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:")
        subprocess.run(["journalctl", "-u", "electricity-monitor", "-n", "10", "--no-pager"], check=False)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")

def create_management_script():
    """–°–æ–∑–¥–∞–µ—Ç —É–¥–æ–±–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    script_content = """#!/bin/bash
# –°–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞

case "$1" in
    start)
        systemctl start electricity-monitor
        echo "‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω"
        ;;
    stop)
        systemctl stop electricity-monitor
        echo "üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        ;;
    restart)
        systemctl restart electricity-monitor
        echo "üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω"
        ;;
    status)
        systemctl status electricity-monitor
        ;;
    logs)
        journalctl -u electricity-monitor -f
        ;;
    enable)
        systemctl enable electricity-monitor
        echo "‚úÖ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –≤–∫–ª—é—á–µ–Ω"
        ;;
    disable)
        systemctl disable electricity-monitor
        echo "‚ùå –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –æ—Ç–∫–ª—é—á–µ–Ω"
        ;;
    *)
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 {start|stop|restart|status|logs|enable|disable}"
        exit 1
        ;;
esac
"""
    
    script_file = "/usr/local/bin/electricity-monitor"
    
    try:
        with open(script_file, 'w') as f:
            f.write(script_content)
        
        # –î–µ–ª–∞–µ–º –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
        os.chmod(script_file, 0o755)
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {script_file}")
        print("   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: electricity-monitor {start|stop|restart|status|logs|enable|disable}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞")
    print("=" * 70)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ root
    if not check_root():
        sys.exit(1)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    working_dir = get_current_directory()
    print(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {working_dir}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
    required_files = [
        "run_monitor_daemon.py",
        "electricity_monitor.py",
        "devices_config.json",
        "tariff_settings.json"
    ]
    
    missing_files = []
    for file_path in required_files:
        if not Path(file_path).exists():
            missing_files.append(file_path)
    
    if missing_files:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã: {', '.join(missing_files)}")
        print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
        sys.exit(1)
    
    print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã")
    
    # –°–æ–∑–¥–∞–µ–º systemd —Å–µ—Ä–≤–∏—Å
    print("\nüîß –°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞...")
    if not create_systemd_service(working_dir):
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é logrotate
    print("\nüìã –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏ –ª–æ–≥–æ–≤...")
    if not create_logrotate_config():
        print("‚ö†Ô∏è  –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ logrotate...")
    
    # –°–æ–∑–¥–∞–µ–º cron –∑–∞–¥–∞—á–∏
    print("\n‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ cron –∑–∞–¥–∞—á...")
    if not create_cron_jobs():
        print("‚ö†Ô∏è  –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ cron...")
    
    # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    print("\nüõ†Ô∏è  –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è...")
    if not create_management_script():
        print("‚ö†Ô∏è  –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ —Å–∫—Ä–∏–ø—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è...")
    
    # –í–∫–ª—é—á–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å
    print("\nüöÄ –í–∫–ª—é—á–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞...")
    if not enable_and_start_service():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: journalctl -u electricity-monitor")
        sys.exit(1)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
    print("\n" + "=" * 70)
    print("üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    print("=" * 70)
    
    show_status()
    
    print("\nüìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:")
    print("   –ó–∞–ø—É—Å–∫: systemctl start electricity-monitor")
    print("   –û—Å—Ç–∞–Ω–æ–≤–∫–∞: systemctl stop electricity-monitor")
    print("   –°—Ç–∞—Ç—É—Å: systemctl status electricity-monitor")
    print("   –õ–æ–≥–∏: journalctl -u electricity-monitor -f")
    print("   –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: electricity-monitor {start|stop|restart|status|logs}")
    
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã:")
    print("   python manage_daemon.py status")
    print("   ls -la electricity_data/")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
