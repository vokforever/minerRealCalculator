#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞.
–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.
"""

import json
import time
import logging
import sys
from pathlib import Path
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(funcName)s:%(lineno)d - %(message)s',
    handlers=[
        logging.FileHandler('test_monitor.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


def test_config_files():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º devices_config.json
    try:
        with open('devices_config.json', 'r', encoding='utf-8') as f:
            devices = json.load(f)
        print(f"‚úÖ devices_config.json: –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(devices)} —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
        
        for device in devices:
            required_fields = ['device_id', 'name', 'location']
            missing_fields = [field for field in required_fields if field not in device]
            if missing_fields:
                print(f"‚ö†Ô∏è  –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {device.get('name', 'Unknown')}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è {missing_fields}")
            else:
                print(f"  ‚úÖ {device['name']} ({device['device_id']}) –≤ {device['location']}")
                
    except FileNotFoundError:
        print("‚ùå devices_config.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ devices_config.json: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è devices_config.json: {e}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º tariff_settings.json
    try:
        with open('tariff_settings.json', 'r', encoding='utf-8') as f:
            tariffs = json.load(f)
        print(f"‚úÖ tariff_settings.json: –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Ç–∞—Ä–∏—Ñ—ã –¥–ª—è {len(tariffs)} –ª–æ–∫–∞—Ü–∏–π")
        
        for location, tariff in tariffs.items():
            if 'tariff_type' not in tariff:
                print(f"‚ö†Ô∏è  –õ–æ–∫–∞—Ü–∏—è {location}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–∏–ø —Ç–∞—Ä–∏—Ñ–∞")
            elif 'ranges' not in tariff:
                print(f"‚ö†Ô∏è  –õ–æ–∫–∞—Ü–∏—è {location}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∏–∞–ø–∞–∑–æ–Ω—ã —Ç–∞—Ä–∏—Ñ–æ–≤")
            else:
                print(f"  ‚úÖ {location}: {tariff['tariff_type']}, {len(tariff['ranges'])} –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤")
                
    except FileNotFoundError:
        print("‚ùå tariff_settings.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ tariff_settings.json: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è tariff_settings.json: {e}")
        return False
    
    return True


def test_dependencies():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("\nüì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    dependencies = [
        ('schedule', 'schedule'),
        ('psutil', 'psutil'),
        ('supabase', 'supabase'),
        ('tinytuya', 'tinytuya'),
        ('dotenv', 'python-dotenv')
    ]
    
    all_available = True
    
    for package_name, import_name in dependencies:
        try:
            __import__(import_name)
            print(f"‚úÖ {package_name}: –¥–æ—Å—Ç—É–ø–µ–Ω")
        except ImportError:
            print(f"‚ùå {package_name}: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            all_available = False
    
    return all_available


def test_main_module_import():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è"""
    print("\nüîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è...")
    
    try:
        # –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        from main import (
            get_device_status_cloud_enhanced,
            calculate_session_cost,
            supabase
        )
        print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ main.py –¥–æ—Å—Ç—É–ø–Ω—ã")
        return True
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ main.py: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ main.py: {e}")
        return False


def test_monitor_creation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∞"""
    print("\nüèóÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞...")
    
    try:
        from electricity_monitor import ElectricityMonitor
        
        monitor = ElectricityMonitor(
            devices_config_path="devices_config.json",
            tariff_settings_path="tariff_settings.json"
        )
        
        print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
        print(f"  –£—Å—Ç—Ä–æ–π—Å—Ç–≤: {len(monitor.devices)}")
        print(f"  –õ–æ–∫–∞—Ü–∏–π: {len(monitor.tariff_settings)}")
        print(f"  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö: {monitor.data_dir}")
        
        return monitor
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞: {e}")
        return None


def test_data_files_creation(monitor):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüìÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if monitor.data_dir.exists():
            print(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {monitor.data_dir} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {monitor.data_dir} –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö
        current_file = monitor.current_data_file
        historical_file = monitor.historical_data_file
        
        if current_file.exists():
            print(f"‚úÖ –§–∞–π–ª —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {current_file}")
        else:
            print(f"‚ùå –§–∞–π–ª —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å–æ–∑–¥–∞–Ω: {current_file}")
            return False
        
        if historical_file.exists():
            print(f"‚úÖ –§–∞–π–ª –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {historical_file}")
        else:
            print(f"‚ùå –§–∞–π–ª –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å–æ–∑–¥–∞–Ω: {historical_file}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤
        try:
            current_data = monitor._load_json(current_file)
            historical_data = monitor._load_json(historical_file)
            
            print(f"  –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ: {current_data.get('total_records', 0)} –∑–∞–ø–∏—Å–µ–π")
            print(f"  –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ: {historical_data.get('total_pending', 0)} –æ–∂–∏–¥–∞—é—Ç")
            
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö: {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False


def test_simulation(monitor):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏–º—É–ª—è—Ü–∏—é –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–º—É–ª—è—Ü–∏–∏ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_records = [
            {
                "timestamp": datetime.now().isoformat(),
                "device_id": "test_device_1",
                "device_name": "Test Miner 1",
                "location": "Test Location",
                "power_w": 1500.0,
                "energy_kwh": 0.125,
                "is_on": True,
                "voltage": 220.0,
                "current": 6.8,
                "cost_rub": 0.60,
                "day_energy_kwh": 0.125,
                "night_energy_kwh": 0.0
            },
            {
                "timestamp": (datetime.now() + timedelta(minutes=5)).isoformat(),
                "device_id": "test_device_2",
                "device_name": "Test Miner 2",
                "location": "Test Location",
                "power_w": 2000.0,
                "energy_kwh": 0.167,
                "is_on": True,
                "voltage": 220.0,
                "current": 9.1,
                "cost_rub": 0.80,
                "day_energy_kwh": 0.167,
                "night_energy_kwh": 0.0
            }
        ]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        monitor._save_current_data(test_records)
        monitor._add_to_historical_data(test_records)
        
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = monitor.get_current_stats()
        print(f"  –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats.get('total_records', 0)} –∑–∞–ø–∏—Å–µ–π, "
              f"{stats.get('pending_sync', 0)} –æ–∂–∏–¥–∞—é—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏: {e}")
        return False


def test_cleanup(monitor):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—á–∏—Å—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüßπ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä—à–µ 1 –¥–Ω—è (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        monitor.cleanup_old_data(days_to_keep=1)
        print("‚úÖ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        stats = monitor.get_current_stats()
        print(f"  –ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {stats.get('total_records', 0)} –∑–∞–ø–∏—Å–µ–π")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞")
    print("=" * 60)
    
    # –°—á–µ—Ç—á–∏–∫–∏ —Ç–µ—Å—Ç–æ–≤
    total_tests = 0
    passed_tests = 0
    
    # –¢–µ—Å—Ç 1: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    total_tests += 1
    if test_config_files():
        passed_tests += 1
    
    # –¢–µ—Å—Ç 2: –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    total_tests += 1
    if test_dependencies():
        passed_tests += 1
    
    # –¢–µ—Å—Ç 3: –ò–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è
    total_tests += 1
    if test_main_module_import():
        passed_tests += 1
    
    # –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∞
    total_tests += 1
    monitor = test_monitor_creation()
    if monitor:
        passed_tests += 1
        
        # –¢–µ—Å—Ç 5: –§–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö
        total_tests += 1
        if test_data_files_creation(monitor):
            passed_tests += 1
        
        # –¢–µ—Å—Ç 6: –°–∏–º—É–ª—è—Ü–∏—è
        total_tests += 1
        if test_simulation(monitor):
            passed_tests += 1
        
        # –¢–µ—Å—Ç 7: –û—á–∏—Å—Ç–∫–∞
        total_tests += 1
        if test_cleanup(monitor):
            passed_tests += 1
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
    print(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total_tests - passed_tests}")
    
    if passed_tests == total_tests:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
        return True
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
        return False


if __name__ == "__main__":
    try:
        success = main()
        exit_code = 0 if success else 1
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
