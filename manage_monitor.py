#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –∑–∞—Ç—Ä–∞—Ç —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞.
–ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å, –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å—Ç–∞—Ç—É—Å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º.
"""

import argparse
import sys
import json
import time
from pathlib import Path
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
try:
    from electricity_monitor import ElectricityMonitor
    from integrate_monitor import MonitorIntegration
except ImportError as e:
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª—ã electricity_monitor.py –∏ integrate_monitor.py –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
    sys.exit(1)


def show_status(integration: MonitorIntegration):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    print("=" * 60)
    print("–°–¢–ê–¢–£–° –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –≠–õ–ï–ö–¢–†–ò–ß–ï–°–¢–í–ê")
    print("=" * 60)
    
    # –°—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–∞
    status = integration.get_status()
    print(f"–°—Ç–∞—Ç—É—Å: {'üü¢ –ó–ê–ü–£–©–ï–ù' if status['is_running'] else 'üî¥ –û–°–¢–ê–ù–û–í–õ–ï–ù'}")
    
    if status['is_running']:
        print(f"PID: {status['pid']}")
        if status['uptime']:
            uptime_hours = status['uptime'] / 3600
            print(f"–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime_hours:.1f} —á–∞—Å–æ–≤")
        print(f"–ü–æ–ø—ã—Ç–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {status['restart_attempts']}/{status['max_restart_attempts']}")
    else:
        print("–ü—Ä–æ—Ü–µ—Å—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω")
    
    print()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    stats = integration.get_electricity_stats()
    print("–°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–ê–ù–ù–´–•:")
    print(f"–°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∞: {stats.get('monitor_status', 'unknown')}")
    print(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {stats.get('last_update', 'N/A')}")
    print(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {stats.get('total_records', 0)}")
    print(f"–û–∂–∏–¥–∞—é—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {stats.get('pending_sync', 0)}")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–∞—Ö
    if 'data_files' in stats:
        print("\n–§–ê–ô–õ–´ –î–ê–ù–ù–´–•:")
        for file_type, file_info in stats['data_files'].items():
            if file_info.get('exists'):
                print(f"  {file_type}: ‚úÖ {file_info.get('size', 0)} –±–∞–π—Ç")
                if file_type == 'current':
                    print(f"    –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {file_info.get('last_update', 'N/A')}")
                    print(f"    –ó–∞–ø–∏—Å–µ–π: {file_info.get('total_records', 0)}")
                elif file_type == 'historical':
                    print(f"    –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {file_info.get('last_sync', 'N/A')}")
                    print(f"    –û–∂–∏–¥–∞—é—Ç: {file_info.get('total_pending', 0)}")
            else:
                print(f"  {file_type}: ‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    print("=" * 60)


def show_recent_data(monitor: ElectricityMonitor, hours: int = 24):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è"""
    try:
        stats = monitor.get_current_stats()
        
        print(f"\n–î–ê–ù–ù–´–ï –ó–ê –ü–û–°–õ–ï–î–ù–ò–ï {hours} –ß–ê–°–û–í:")
        print("-" * 40)
        
        if 'last_24h' in stats:
            last_24h = stats['last_24h']
            print(f"–û–±—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: {last_24h.get('total_energy_kwh', 0):.3f} –∫–í—Ç¬∑—á")
            print(f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {last_24h.get('total_cost_rub', 0):.2f} —Ä—É–±.")
            
            if 'location_stats' in last_24h:
                print("\n–ü–æ –ª–æ–∫–∞—Ü–∏—è–º:")
                for location, loc_stats in last_24h['location_stats'].items():
                    print(f"  {location}:")
                    print(f"    –≠–Ω–µ—Ä–≥–∏—è: {loc_stats.get('energy_kwh', 0):.3f} –∫–í—Ç¬∑—á")
                    print(f"    –°—Ç–æ–∏–º–æ—Å—Ç—å: {loc_stats.get('cost_rub', 0):.2f} —Ä—É–±.")
                    print(f"    –£—Å—Ç—Ä–æ–π—Å—Ç–≤: {len(loc_stats.get('devices', []))}")
        else:
            print("–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")


def show_file_contents(file_path: str, max_lines: int = 20):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        file_path = Path(file_path)
        if not file_path.exists():
            print(f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        print(f"\n–°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê: {file_path}")
        print("-" * 50)
        
        with open(file_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        if isinstance(data, dict):
            print("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞:")
            for key, value in data.items():
                if isinstance(value, list):
                    print(f"  {key}: —Å–ø–∏—Å–æ–∫ –∏–∑ {len(value)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                elif isinstance(value, dict):
                    print(f"  {key}: —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–∞–º–∏ {list(value.keys())}")
                else:
                    print(f"  {key}: {value}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
            if 'records' in data and data['records']:
                print(f"\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ {min(max_lines, len(data['records']))} –∑–∞–ø–∏—Å–µ–π:")
                for i, record in enumerate(data['records'][-max_lines:]):
                    print(f"  {i+1}. {record.get('timestamp', 'N/A')} - "
                          f"{record.get('device_name', 'Unknown')}: "
                          f"{record.get('energy_kwh', 0):.3f} –∫–í—Ç¬∑—á")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –∑–∞—Ç—Ä–∞—Ç —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python manage_monitor.py start          # –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
  python manage_monitor.py stop           # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
  python manage_monitor.py status         # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å
  python manage_monitor.py sync           # –†—É—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
  python manage_monitor.py data           # –ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
  python manage_monitor.py files          # –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤
        """
    )
    
    parser.add_argument('action', choices=['start', 'stop', 'status', 'sync', 'data', 'files'],
                       help='–î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
    
    parser.add_argument('--devices', default='devices_config.json',
                       help='–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: devices_config.json)')
    
    parser.add_argument('--tariffs', default='tariff_settings.json',
                       help='–ü—É—Ç—å –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —Ç–∞—Ä–∏—Ñ–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: tariff_settings.json)')
    
    parser.add_argument('--hours', type=int, default=24,
                       help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 24)')
    
    parser.add_argument('--max-lines', type=int, default=20,
                       help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 20)')
    
    args = parser.parse_args()
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        integration = MonitorIntegration(
            monitor_script="electricity_monitor.py",
            devices_config=args.devices,
            tariff_settings=args.tariffs
        )
        
        if args.action == 'start':
            print("–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
            if integration.start_monitor():
                print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
                show_status(integration)
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
                sys.exit(1)
        
        elif args.action == 'stop':
            print("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
            integration.stop_monitor()
            print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        elif args.action == 'status':
            show_status(integration)
        
        elif args.action == 'sync':
            if integration.is_running:
                print("–ó–∞–ø—É—Å–∫ —Ä—É—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...")
                if integration.manual_sync():
                    print("‚úÖ –°–∏–≥–Ω–∞–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é")
            else:
                print("‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        
        elif args.action == 'data':
            if integration.is_running:
                # –°–æ–∑–¥–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
                monitor = ElectricityMonitor(
                    devices_config_path=args.devices,
                    tariff_settings_path=args.tariffs
                )
                show_recent_data(monitor, args.hours)
            else:
                print("‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω, –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        
        elif args.action == 'files':
            print("–°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–û–í –î–ê–ù–ù–´–•:")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            current_file = Path("electricity_data/current_electricity_data.json")
            if current_file.exists():
                show_file_contents(str(current_file), args.max_lines)
            else:
                print("–§–∞–π–ª —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            historical_file = Path("electricity_data/historical_electricity_data.json")
            if historical_file.exists():
                show_file_contents(str(historical_file), args.max_lines)
            else:
                print("–§–∞–π–ª –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
