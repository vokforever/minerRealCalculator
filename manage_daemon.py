#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–µ–º–æ–Ω–æ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞ –Ω–∞ VPS.
–ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å, –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å—Ç–∞—Ç—É—Å –¥–µ–º–æ–Ω–∞.
"""

import os
import sys
import signal
import time
import json
from pathlib import Path
from datetime import datetime

def get_pid_from_file():
    """–ü–æ–ª—É—á–∞–µ—Ç PID –∏–∑ —Ñ–∞–π–ª–∞"""
    pid_file = "monitor_daemon.pid"
    if os.path.exists(pid_file):
        try:
            with open(pid_file, 'r') as f:
                return int(f.read().strip())
        except (ValueError, IOError):
            return None
    return None

def is_process_running(pid):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º PID"""
    if pid is None:
        return False
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª 0 –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
        os.kill(pid, 0)
        return True
    except OSError:
        return False

def get_process_info(pid):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–µ"""
    if not is_process_running(pid):
        return None
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
        stat_file = f"/proc/{pid}/stat"
        if os.path.exists(stat_file):
            with open(stat_file, 'r') as f:
                stats = f.read().split()
                if len(stats) > 21:
                    # 22-–π —ç–ª–µ–º–µ–Ω—Ç - –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤ —Ç–∏–∫–∞—Ö
                    start_time = int(stats[21])
                    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º—ã
                    with open('/proc/uptime', 'r') as f:
                        uptime = float(f.read().split()[0])
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –ø—Ä–æ—Ü–µ—Å—Å–∞
                    process_uptime = uptime - (start_time / 100)  # 100 —Ç–∏–∫–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É
                    return {
                        "pid": pid,
                        "uptime_seconds": process_uptime,
                        "uptime_hours": process_uptime / 3600
                    }
    except Exception:
        pass
    
    return {"pid": pid, "uptime_seconds": None, "uptime_hours": None}

def start_daemon():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–µ–º–æ–Ω"""
    pid = get_pid_from_file()
    
    if pid and is_process_running(pid):
        print(f"‚ùå –î–µ–º–æ–Ω —É–∂–µ –∑–∞–ø—É—â–µ–Ω (PID: {pid})")
        return False
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        import subprocess
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å nohup –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ —Ñ–æ–Ω–µ
        cmd = [
            "nohup", 
            sys.executable, 
            "run_monitor_daemon.py"
        ]
        
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥ –≤ —Ñ–∞–π–ª—ã
        with open("nohup.out", "w") as out, open("nohup.err", "w") as err:
            process = subprocess.Popen(
                cmd,
                stdout=out,
                stderr=err,
                start_new_session=True
            )
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
        time.sleep(2)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –ª–∏
        new_pid = get_pid_from_file()
        if new_pid and is_process_running(new_pid):
            print(f"‚úÖ –î–µ–º–æ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω (PID: {new_pid})")
            print(f"   –õ–æ–≥–∏: monitor_daemon.log")
            print(f"   –í—ã–≤–æ–¥: nohup.out")
            print(f"   –û—à–∏–±–∫–∏: nohup.err")
            return True
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ–º–æ–Ω")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        return False

def stop_daemon():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–µ–º–æ–Ω"""
    pid = get_pid_from_file()
    
    if not pid or not is_process_running(pid):
        print("‚ùå –î–µ–º–æ–Ω –Ω–µ –∑–∞–ø—É—â–µ–Ω")
        return False
    
    print(f"üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ–º–æ–Ω–∞ (PID: {pid})...")
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª SIGTERM
        os.kill(pid, signal.SIGTERM)
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        for i in range(10):
            if not is_process_running(pid):
                print("‚úÖ –î–µ–º–æ–Ω —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return True
            time.sleep(1)
        
        # –ï—Å–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º
        print("‚ö†Ô∏è  –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
        os.kill(pid, signal.SIGKILL)
        time.sleep(1)
        
        if not is_process_running(pid):
            print("‚úÖ –î–µ–º–æ–Ω –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ–º–æ–Ω")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
        return False

def restart_daemon():
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –¥–µ–º–æ–Ω"""
    print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω–∞...")
    
    if stop_daemon():
        time.sleep(2)
        if start_daemon():
            print("‚úÖ –î–µ–º–æ–Ω —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
            return True
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ–º–æ–Ω")
            return False
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ–º–æ–Ω –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞")
        return False

def show_status():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –¥–µ–º–æ–Ω–∞"""
    print("=" * 60)
    print("–°–¢–ê–¢–£–° –î–ï–ú–û–ù–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –≠–õ–ï–ö–¢–†–ò–ß–ï–°–¢–í–ê")
    print("=" * 60)
    
    pid = get_pid_from_file()
    
    if pid and is_process_running(pid):
        print(f"üü¢ –°—Ç–∞—Ç—É—Å: –ó–ê–ü–£–©–ï–ù")
        print(f"PID: {pid}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
        process_info = get_process_info(pid)
        if process_info and process_info.get("uptime_hours"):
            print(f"–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {process_info['uptime_hours']:.1f} —á–∞—Å–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö
        print("\nüìÅ –§–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö:")
        data_dir = Path("electricity_data")
        if data_dir.exists():
            current_file = data_dir / "current_electricity_data.json"
            historical_file = data_dir / "historical_electricity_data.json"
            
            if current_file.exists():
                try:
                    with open(current_file, 'r') as f:
                        data = json.load(f)
                    size = current_file.stat().st_size
                    records = data.get("total_records", 0)
                    last_update = data.get("last_update", "N/A")
                    print(f"  ‚úÖ –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ: {size} –±–∞–π—Ç, {records} –∑–∞–ø–∏—Å–µ–π")
                    print(f"     –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {last_update}")
                except Exception as e:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            else:
                print("  ‚ùå –§–∞–π–ª —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            if historical_file.exists():
                try:
                    with open(historical_file, 'r') as f:
                        data = json.load(f)
                    size = historical_file.stat().st_size
                    pending = data.get("total_pending", 0)
                    last_sync = data.get("last_sync", "N/A")
                    print(f"  ‚úÖ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ: {size} –±–∞–π—Ç, {pending} –æ–∂–∏–¥–∞—é—Ç")
                    print(f"     –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {last_sync}")
                except Exception as e:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            else:
                print("  ‚ùå –§–∞–π–ª –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            print("  ‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏
        print("\nüìã –õ–æ–≥–∏:")
        log_files = [
            "monitor_daemon.log",
            "electricity_monitor.log",
            "nohup.out",
            "nohup.err"
        ]
        
        for log_file in log_files:
            if os.path.exists(log_file):
                size = os.path.getsize(log_file)
                mtime = datetime.fromtimestamp(os.path.getmtime(log_file))
                print(f"  ‚úÖ {log_file}: {size} –±–∞–π—Ç, –∏–∑–º–µ–Ω–µ–Ω: {mtime.strftime('%Y-%m-%d %H:%M:%S')}")
            else:
                print(f"  ‚ùå {log_file}: –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    else:
        print("üî¥ –°—Ç–∞—Ç—É—Å: –û–°–¢–ê–ù–û–í–õ–ï–ù")
        print("PID: –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ PID —Ñ–∞–π–ª
        if os.path.exists("monitor_daemon.pid"):
            print("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω —É—Å—Ç–∞—Ä–µ–≤—à–∏–π PID —Ñ–∞–π–ª")
    
    print("=" * 60)

def show_logs(lines=50):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–æ–≤"""
    log_file = "monitor_daemon.log"
    
    if not os.path.exists(log_file):
        print(f"‚ùå –§–∞–π–ª –ª–æ–≥–æ–≤ {log_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    print(f"\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ {lines} —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤ ({log_file}):")
    print("-" * 60)
    
    try:
        with open(log_file, 'r', encoding='utf-8') as f:
            all_lines = f.readlines()
            last_lines = all_lines[-lines:] if len(all_lines) > lines else all_lines
            
            for line in last_lines:
                print(line.rstrip())
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")

def cleanup():
    """–û—á–∏—â–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ñ–∞–π–ª—ã"""
    print("üßπ –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ñ–∞–π–ª–æ–≤...")
    
    # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π PID —Ñ–∞–π–ª –µ—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    pid = get_pid_from_file()
    if pid and not is_process_running(pid):
        try:
            os.remove("monitor_daemon.pid")
            print("‚úÖ –£–¥–∞–ª–µ–Ω —É—Å—Ç–∞—Ä–µ–≤—à–∏–π PID —Ñ–∞–π–ª")
        except Exception as e:
            print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å PID —Ñ–∞–π–ª: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –ª–æ–≥–æ–≤
    log_files = ["monitor_daemon.log", "nohup.out", "nohup.err"]
    for log_file in log_files:
        if os.path.exists(log_file):
            size_mb = os.path.getsize(log_file) / (1024 * 1024)
            if size_mb > 10:  # –ë–æ–ª—å—à–µ 10 –ú–ë
                print(f"‚ö†Ô∏è  –õ–æ–≥ —Ñ–∞–π–ª {log_file} –±–æ–ª—å—à–æ–π: {size_mb:.1f} –ú–ë")
                print("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—á–∏—Å—Ç–∫–∞ –∏–ª–∏ —Ä–æ—Ç–∞—Ü–∏—è")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python manage_daemon.py <–∫–æ–º–∞–Ω–¥–∞>")
        print("\n–ö–æ–º–∞–Ω–¥—ã:")
        print("  start     - –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ–º–æ–Ω")
        print("  stop      - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ–º–æ–Ω")
        print("  restart   - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ–º–æ–Ω")
        print("  status    - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å")
        print("  logs      - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏")
        print("  cleanup   - –û—á–∏—Å—Ç–∏—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ñ–∞–π–ª—ã")
        return
    
    command = sys.argv[1].lower()
    
    if command == "start":
        start_daemon()
    elif command == "stop":
        stop_daemon()
    elif command == "restart":
        restart_daemon()
    elif command == "status":
        show_status()
    elif command == "logs":
        lines = int(sys.argv[2]) if len(sys.argv) > 2 else 50
        show_logs(lines)
    elif command == "cleanup":
        cleanup()
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
        print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: start, stop, restart, status, logs, cleanup")

if __name__ == "__main__":
    main()
